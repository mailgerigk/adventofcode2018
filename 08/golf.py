from functools import reduce    
print(str((lambda a:lambda v:a(a,v))(lambda rec,node: sum(node[1]) + sum([rec(rec,child) for child in node[0]]))(((lambda a: lambda v:a(a,v))(lambda rec,data: ((reduce(lambda a,b:(a[0]+[rec(rec,a[1])[0]],rec(rec,a[1])[1]),range(data[0]),([],data[2:]))[0],reduce(lambda a,b:(a[0]+[rec(rec,a[1])[0]],rec(rec,a[1])[1]),range(data[0]),([],data[2:]))[1][:data[1]]),reduce(lambda a,b:(a[0]+[rec(rec,a[1])[0]],rec(rec,a[1])[1]),range(data[0]),([],data[2:]))[1][data[1]:]))(list(map(int, open("input.txt").readlines()[0].split())))[0])))+"\n"+str((lambda a:lambda v:a(a,v))(lambda rec,node: sum([rec(rec, node[0][idx - 1]) for idx in node[1] if idx and idx <= len(node[0])]) if node[0] else sum(node[1]))(((lambda a: lambda v:a(a,v))(lambda rec,data: ((reduce(lambda a,b:(a[0]+[rec(rec,a[1])[0]],rec(rec,a[1])[1]),range(data[0]),([],data[2:]))[0],reduce(lambda a,b:(a[0]+[rec(rec,a[1])[0]],rec(rec,a[1])[1]),range(data[0]),([],data[2:]))[1][:data[1]]),reduce(lambda a,b:(a[0]+[rec(rec,a[1])[0]],rec(rec,a[1])[1]),range(data[0]),([],data[2:]))[1][data[1]:]))(list(map(int, open("input.txt").readlines()[0].split())))[0]))))
